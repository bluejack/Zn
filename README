                           ~ zinc language compiler ~
                                     v0.02          

---                 Copyright (c) 2010-2011, Blunt Jackson                   ---

Welcome. The zinc project is a personal effort at language design and a learning
experience in compiler construction and extensible runtime development. The zinc
language is intended to apply some of the efficiencies erlang brings to parallel
processing to a pragmatic imperative language that offers first-class objects as
well as some new constructs designed to encourage clean application design while
solving the every-day problems of the real world. I call this development philo-
sophy "Task Oriented Application Design," or TOAD.

Deeper discussion of the theory and practice of TOAD is reserved for such a time
as this language demonstrates any value in the approach.

:   Want to read the code? Follow the trail: Begin with src/apps/zinc/zinc.c   :

--------------------------------------------------------------------------------

                                    STATUS

--------------------------------------------------------------------------------

Overall:  Not Yet Functional

Shell:    Primitive command execution in place.
Runtime:  Nuthin
Compiler: Nuthin

Current:  Compiler->Basic Parser Scaffolding

--------------------------------------------------------------------------------

Usage:

$ zinc            <-- Shell Mode
$ zinc file.zn    <-- Interpret and execute file.zn
$ zinc -c file.zn <-- Compile file.zn to application 'file'

--------------------------------------------------------------------------------

Shell:

>>>  ( ) [Dec 10] Connect to Zinc runtime
     ( ) [Dec 10] Detach from shell command
     ( ) [Dec 10] Command history
     ( ) [Dec 10] Research Termios/Termcap alternatives to ncurses
     ( ) [Dec 10] Left/Right arrows, ctrl-a, ctrl-e
     ( ) [Jan 11] Input to child processes
     ( ) [Jan 11] Wildcard expansion
     ( ) [Feb 11] User identification & permissions management
     ( ) [Feb 11] Chaining programs
     ( ) [Feb 11] Redirecting stdin/stdout

Runtime:
          
>>>  ( ) [Dec 10] Connect to shell display
>>>  ( ) [Dec 10] Hello World (interactive)
     ( ) [Dec 10] Basic state management
     (.) [Dec 10] Symbol table, first draft
         [x] Hash Table Primitive available!
     ( ) [Jan 11] Establish standalone mode for file interpretation
     ( ) [Jan 11] Hello World (standalone)

Compiler:
     ( ) [Feb 11] Hello world -> C

--------------------------------------------------------------------------------
: Plans are only good intentions unless they immediately degenerate into hard  :
: work.                                                      -- Peter Drucker  :
--------------------------------------------------------------------------------

Completed

    (x) [18.12.2010] Basic parser scaffolding
    (x) [18.12.2010] Test linking a second parser
    (x) [18.12.2010] Connect to runtime
    (X) [13.12.2010] Basic unit test support in framework
    (X) [11.12.2010] Scrolling window
    (X) [11.12.2010] Correct command execution w/ stdout pass through
    (X) [11.12.2010] Experiment with ncurses display
    (X) [10.12.2010] Assign environment variables (overwrite, append)
    (X) [10.12.2010] Multiple commands per line
    (X) [10.12.2010] Adopt & pass on environment
    (X) [10.12.2010] Shell parser scaffolding
